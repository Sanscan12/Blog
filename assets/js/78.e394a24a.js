(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{421:function(t,n,r){"use strict";r.r(n);var e=r(4),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("p",[t._v("监听器机制是Spring框架提供的一种主体对象状态变化的机制 . 当被监听的对象发生变化时 , 相关的监听器就会被通知 , 进行一些相应的处理")]),t._v(" "),n("p",[t._v("比如我们可以用监听器监听Spring容器的启动和刷新事件 , 然后在事件发生后做一些初始化操作")]),t._v(" "),n("p",[n("strong",[t._v("监听器三大组件 :")])]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("事件(ApplicationEvent)")]),t._v(" : 触发监听器的动作")]),t._v(" "),n("li",[n("strong",[t._v("事件监听器(ApplicationListener)")]),t._v(" : 接口 , 定义了 onApplicationEvent方法 , 监听触发调用的方法")]),t._v(" "),n("li",[n("strong",[t._v("事件发布者(ApplicationEventPublisher)")]),t._v(" : 接口 , 定义了 publishEvent方法用户发布事件 , Spring的Context实现接口 , 可以发布事件")])]),t._v(" "),n("p",[t._v("触发通常需要通过@EventListener注解一个方法 , 让该方法监听某个ApplicationEvent事件 , 一旦该事件被发布 , 这个方法就会被自动执行")]),t._v(" "),n("h2",{attrs:{id:"监听器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监听器"}},[t._v("#")]),t._v(" 监听器")]),t._v(" "),n("h3",{attrs:{id:"生命周期监听器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期监听器"}},[t._v("#")]),t._v(" 生命周期监听器")]),t._v(" "),n("p",[t._v("生命周期会监听SpringBoot运作过程是周期 , 监听需要重写 "),n("code",[t._v("SpringApplicationRunListener")]),t._v("接口")]),t._v(" "),n("p",[n("strong",[n("code",[t._v("SpringApplicationRunListener")]),t._v("接口重写的方法")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法")]),t._v(" "),n("th",[t._v("参数说明")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("starting()")]),t._v(" "),n("td",[t._v("ConfigurableBootstrapContext : 引导整个项目启动器")]),t._v(" "),n("td",[t._v("引用开始就调用(监听器管理一旦加载完运行)")])]),t._v(" "),n("tr",[n("td",[t._v("environmentPrepared()")]),t._v(" "),n("td",[t._v("ConfigurableBootstrapContext : 上下文引导"),n("br"),t._v("ConfigurableEnvironment : 环境")]),t._v(" "),n("td",[t._v("环境准备完成 (ico容器未创建)")])]),t._v(" "),n("tr",[n("td",[t._v("contextPrepared()")]),t._v(" "),n("td",[t._v("ConfigurableApplicationContext : 应用程序上下文")]),t._v(" "),n("td",[t._v("ioc容器创建准备完成 , 并关闭引用启动器 (但 sources主配置类 未加载)")])]),t._v(" "),n("tr",[n("td",[t._v("contextLoaded()")]),t._v(" "),n("td",[t._v("ConfigurableApplicationContext : 应用程序上下文")]),t._v(" "),n("td",[t._v("ioc容器加载 (主配置类加载) , 但 ico容器的Bean未加载")])]),t._v(" "),n("tr",[n("td",[t._v("started()")]),t._v(" "),n("td",[t._v("ConfigurableApplicationContext : 应用程序上下文"),n("br"),t._v("Duration : 启动程序所需的时间 或 null")]),t._v(" "),n("td",[t._v("ioc容器刷新 (所有Bean初始化) , 但 runner 未调用")])]),t._v(" "),n("tr",[n("td",[t._v("ready()")]),t._v(" "),n("td",[t._v("ConfigurableApplicationContext : 应用程序上下文"),n("br"),t._v("Duration : 启动程序所需的时间 或 null")]),t._v(" "),n("td",[t._v("ioc容器刷新 , runner 也调用完成")])]),t._v(" "),n("tr",[n("td",[t._v("failed()")]),t._v(" "),n("td",[t._v("ConfigurableApplicationContext : 应用程序上下文"),n("br"),t._v("Throwable : 失败")]),t._v(" "),n("td",[t._v("捕捉starting()之后的步骤异常情 况")])])])]),t._v(" "),n("p",[t._v("SpringBoot生命周期运作流程 : (分三大部分)")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("引导部分")])]),t._v(" "),n("ol",[n("li",[t._v("staring : 启动")]),t._v(" "),n("li",[t._v("environmentPrepared : 环境准备完成")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("启动部分")])]),t._v(" "),n("ol",[n("li",[t._v("contextPrepared : ioc创建准备完成 , 主程序未加载")]),t._v(" "),n("li",[t._v("contextLoaded : ioc加载 , 并未刷新")]),t._v(" "),n("li",[t._v("started : ioc刷新 runner未调用")]),t._v(" "),n("li",[t._v("ready : ioc刷新 runner未调用完成")])]),t._v(" "),n("ul",[n("li",[t._v("failed : 启动失败 (失败情况下)")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("运行部分")])]),t._v(" "),n("p",[t._v("contxt.isRunning() 运行中")])])]),t._v(" "),n("p",[n("strong",[t._v("应用步骤 :")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("创建 自定义监听类 MyApplistener实现 SpringApplicationRunListener接口")])]),t._v(" "),n("li",[n("p",[t._v("重写接口所有方法 (打印查看运行状况)")])]),t._v(" "),n("li",[n("p",[t._v("新建文件 加载文件 "),n("code",[t._v("/resources/META-INF/spring.factories")])]),t._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 后面写的是 自定义监听类全限定名路径")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("org.springframework.boot.SpringApplicationRunListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("com.sans.demo2.listener.MyAppListener")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("运行Application类 查看控制台打印即可")])])]),t._v(" "),n("p",[t._v("::: noit 未重写默认是以下配置")]),t._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("org.springframework.boot.SpringApplicationRunListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\org.springframework.boot.context.event.EventPublishingRunListener")]),t._v("\n")])])]),n("p",[t._v(":::")]),t._v(" "),n("p",[t._v("在Application启动类中跟踪可以看到 , 该方法是根据指定路径配置文件进行加载的监听器")]),t._v(" "),n("p",[n("img",{attrs:{src:"C:%5CUsers%5CSans%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230607170145329.png",alt:"image-20230607170145329"}})]),t._v(" "),n("p",[n("img",{attrs:{src:"C:%5CUsers%5CSans%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230607164008796.png",alt:"image-20230607164008796"}})])])}),[],!1,null,null,null);n.default=a.exports}}]);