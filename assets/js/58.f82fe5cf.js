(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{395:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言"}},[t._v("#")]),t._v(" 1. 前言")]),t._v(" "),s("p",[t._v("非常感谢虎哥给我带来这篇Redis基础原理知识的讲解 , 让我更深刻地理解了Redis的设计思想和数据结构 . 从最基本概念到高级特性，虎哥逐层讲解，让我们受益匪浅")]),t._v(" "),s("p",[s("strong",[t._v("视频 :")]),t._v(" "),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1cr4y1671t/?p=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.bilibili.com"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"_2-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据结构"}},[t._v("#")]),t._v(" 2. 数据结构")]),t._v(" "),s("h3",{attrs:{id:"_2-1-sds"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-sds"}},[t._v("#")]),t._v(" 2.1 SDS")]),t._v(" "),s("p",[t._v("Redis构建了一种新的字符串结构 , 称为简单动态字符串(SDS)")]),t._v(" "),s("p",[t._v("C语言中的字符串 , 是通过数组形式拼接字符 , 因此没有直接使用语言中的字符串 , 并且当中也存在很多问题 :")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("获取字符串长度的需要通过运算")])]),t._v(" "),s("li",[s("strong",[t._v("非二进制安全")])]),t._v(" "),s("li",[s("strong",[t._v("不可修改")])])]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("操作快 , 简单 , 灵活 (有标识记录长度等相关信息 , 用于检索数组操作)")]),t._v(" "),s("li",[t._v("动态扩容 (含有扩容相关机制)")]),t._v(" "),s("li",[t._v("二进制形式 , 相对安全")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("占用内存 (结构体包含的元数据过多)")]),t._v(" "),s("li",[t._v("功能有限 (仅限于读写操作 , 没有其他相关拓展功能)")])]),t._v(" "),s("p",[s("strong",[t._v("SDS结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 控制SDS的头类型大小 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* sdshdr8 结构体名称 . 有很多个相同结构 如上面... */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_attribute_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_packed_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sdshdr8 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* uint8_t : 无符号8个bit位 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf已保存的字符串字节数 , 不包含结束标识 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf申请的总字节数 , 不包含结束标识 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 不同SDS的头类型 , 用来控制SDS的头大小 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("flags意图")]),t._v(" "),s("p",[t._v("uint8_t 定义的是 无符号8个bit位 , 8bit位长度就仅限于 0 - 255 的大小 , 那么通过 len 和 alloc 控制的长度不可能仅限于 0 - 255 , 因此 通过 flags 控制字节大小 , 尽可能将 8bit 压缩在 0 - 255 数值范围")]),t._v(" "),s("p",[s("strong",[t._v("PS :")]),t._v(" 1字节 = 8位")])]),t._v(" "),s("p",[t._v("假如我Redis执行该命令 "),s("code",[t._v("set name Sans")]),t._v(' . 那么Redis将在底层创建两个SDS , 分别对 {"name", "Sans"} 结构分析 :')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['n','a','m','e']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4(1*4)")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['S','a','n','s']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4(1*4)")])])])]),t._v(" "),s("p",[t._v('假如 往"Sans" SDS追加一段字符 ",Any" , 那么会执行内存拓展申请 : (申请有两种可能)')]),t._v(" "),s("ul",[s("li",[t._v("如果新字符串小于1M , 则 增加后的长度两倍 + 1")]),t._v(" "),s("li",[t._v("如果新字符串大于1M , 则 增加后的长度两倍 + 1M +1 (内存预分配)")])]),t._v(" "),s("p",[t._v('那么 "Sans" 这变为 "Sans,Any" , SDS结构分析')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("12")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['S', 'a', 'n', 's', ',', 'A', 'n', 'y']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8(1*8)")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("C语言字符串结尾必须有 "),s("code",[t._v("\\0")]),t._v(" 作为结束 , 因此 计算后的长度需要+1 , 就是为结束标示而腾出的位置")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-intset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-intset"}},[t._v("#")]),t._v(" 2.2 IntSet")]),t._v(" "),s("p",[t._v("IntSet是Redis中set集合的一种实现方式 , 基于 整数数组 来实现 , 并且具备 长度可变/有序 等特征")]),t._v(" "),s("p",[t._v("为了方便查找 , Redis会将intset中所有的整数按照升序依次保存在contents数组中")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("IntSet 确保元素 唯一 , 有序")]),t._v(" "),s("li",[t._v("类型升级机制 , 节省内存")]),t._v(" "),s("li",[t._v("快速查找 (内部采用二分查找算法)")]),t._v(" "),s("li",[t._v("内存连续 (存储是连续形式 , 充分利用资源)")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("只能用于整型")]),t._v(" "),s("li",[t._v("内存浪费 (当数组中有一个元素大数字 , 且其他都是小元素)")]),t._v(" "),s("li",[t._v("不能范围查找 (指定范围查元素)")])]),t._v(" "),s("p",[s("strong",[t._v("IntSet结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存放 encoding , 表示不同整型大小 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 2字节 整数 , 类以java的short */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nt16t_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 4字节 整数 , 类以java的int */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nt32t_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 8字节 整数 , 类以java的long */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 编码方式 , 支特存放16位、32位、64位整数 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 元素个数 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 整数数组 , 保存集合数据 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int8_t")]),t._v(" contents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("intset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("假如 使用intset存了 {20, 5, 10} 3个元素 , 采取编码 INTSET_ENC16(2字节) , "),s("strong",[t._v("IntSet结构分析 :")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("INTSET_ENC16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("contents[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("[5,10,20]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("6(2*3)")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("上面定义了采用的类型因此存储的字节是不一样的! 采用了 INTSET_ENC16 类型 2字节")])]),t._v(" "),s("p",[t._v("假如 数组添加了一个 5000 , 大于 INTSET_ENC16(2字节) 的范围 , IntSet会自动升级编码方式找到合适大小 , 升级流程 :")]),t._v(" "),s("ol",[s("li",[t._v("升级编码 INTSET_ENC_INT32(4字节) , 并按照新的编码方式及元素个数扩容数组")]),t._v(" "),s("li",[t._v("倒序依次将数组中的元素拷贝到扩容后的正确位置")]),t._v(" "),s("li",[t._v("将 5000元素 添加放入数组末尾")]),t._v(" "),s("li",[t._v("IntSet的 encoding属性改为INTSET_ENC_INT32 ; length属性改为4")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("步骤2 倒序扩容是为了防止前面的数在扩容时覆盖其他数据 . 一号元素占用2字节改为4字节  , 会占用到第二元素位置的2字节 .")]),t._v(" "),s("p",[t._v("为了防止这一现象 , 采用倒序扩容 , 从最后元素开始扩容 !")])]),t._v(" "),s("p",[s("strong",[t._v("结构分析 :")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("INTSET_ENC32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("contents[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("[5,10,20,5000]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16(4*4)")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-3-dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-dict"}},[t._v("#")]),t._v(" 2.3 Dict")]),t._v(" "),s("p",[t._v("Redis中的键值对映射关系底层是通过 Dict实现的 , 它涉及到 键值对 , 哈希表 , 有序集合等相关应用")]),t._v(" "),s("p",[t._v("Dict的底层是由 数组和链表 组合 , 数组中每个元素都是一个指向链表的指针 , 每个链表节点包含一个键值对")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("读写快 (O(1)时间复杂度)")]),t._v(" "),s("li",[t._v("动态 扩容/收缩 (根据实际情况变化内存)")]),t._v(" "),s("li",[t._v("支持高并发")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("占用内存多 (动态数组 , 相对少量数据可能比较浪费空间)")]),t._v(" "),s("li",[t._v("哈希可能冲突 (较为极端的例子)")]),t._v(" "),s("li",[t._v("不支持持久化 (dict基于内存存储)")])]),t._v(" "),s("p",[s("strong",[t._v("Dict结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict类型 , 内置不同的hash函数")]),t._v("\n\tdictType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有数据 , 在做特殊hash运算时用")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个Dict包含两个哈希表 , 一个是当前数据 , 另一个 rehash时使用(一般为空) ")]),t._v("\n\tdictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash的进度 , -1:未进行; rehashidx > -1:运行")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash是否暂停 , 1:暂停;0:继续")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int16_t")]),t._v(" pauserehash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry数组")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组中保存的是指向entry的指针")]),t._v("\n\tdictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小的掩码 , 总等于size-1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry个数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希节点 dictEntry")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键 key")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值 val")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个Entry的指针")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-10.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2-3-1-扩容机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-扩容机制"}},[t._v("#")]),t._v(" 2.3.1 扩容机制")]),t._v(" "),s("p",[t._v("Dict中的 table 是数组与单向链表 的结构 , 当集合的元素较多时 , 必然会导致哈希冲突 , 和链表过长问题 , 甚至会影响效率\n因此 Dict内置了 自动扩容机制 , 当每次新增键值对的时 , 会检测 "),s("strong",[t._v("负载因子")]),t._v("(LoadFactor) , 判断以下两种条件会触发扩容 :")]),t._v(" "),s("ul",[s("li",[t._v("LoadFactor >= 1 , 并且 Redis 没有进行持久化")]),t._v(" "),s("li",[t._v("LoadFactor > 5")])]),t._v(" "),s("p",[s("strong",[t._v("计算公式 :")]),t._v(" "),s("code",[t._v("负载因子(LoadFactor) = used(当前元素总数)/size(空间总数)")])]),t._v(" "),s("p",[s("strong",[t._v("扩容运作过程 :")])]),t._v(" "),s("ol",[s("li",[t._v("创建 新Hash , 新Hash大小为 原Hash元素总数+1 的2^n (简单理解为2倍)")]),t._v(" "),s("li",[t._v("将 原Hash 所有元素逐个遍历 , 插入 新Hash (重新分配 哈希桶 , 防止hash冲突)")]),t._v(" "),s("li",[t._v("插入完后 Redis会将 原Hash 释放")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("dict.ht[0] = 原Hash")]),t._v(" "),s("p",[t._v("dict.ht[1] = 新Hash")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("扩容中的特殊情况")]),t._v(" "),s("p",[s("strong",[t._v("扩容中插入元素 :")])]),t._v(" "),s("p",[t._v("在扩容中若有 新元素 插入 , Redis会将 新元素 先插入 原Hash 中 , 再将 原Hash 所有元素逐个遍历插入至 新Hash (利用key唯一性 , 保证了 新元素 不会缺漏)")]),t._v(" "),s("p",[s("strong",[t._v("扩容中多线程操作dict :")])]),t._v(" "),s("p",[t._v("在扩容中 , 如果有多个线程同时对dict进行操作 , Redis会采取读写锁机制保证 dict 的线程安全")])]),t._v(" "),s("p",[s("strong",[t._v("扩容机制源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictExpandIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果正在rehash , 则返回ok")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果哈希表为空 , 则初始化哈希表为默认大小 : 4")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当负载因子(used/size)达到1以上 , 并且当前没有进行ogrewrite(持久化过程)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d->ht[0].used >= d->ht[0].size => (used/size)达到1以上")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict_can_resize (Redis是否闲置状态 , 非持久化状态)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d->ht[0].used/d->ht[0].size > dict_force_resize_ratio => 负载因子超过5 , 则进行dictExpand(扩容)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict_can_resize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dict_force_resize_ratio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 扩容大小为used + 1 , 底层会对扩容大小做判断 , 实际上找的是第一个大于等于 used + 1 的 2^n")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-3-2-收缩机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-收缩机制"}},[t._v("#")]),t._v(" 2.3.2 收缩机制")]),t._v(" "),s("p",[t._v("Dict还有收缩机制 , 正是和扩容机制相反 . 每当删除元素的时候 , 会检测 "),s("strong",[t._v("负载因子")]),t._v("(LoadFactor)")]),t._v(" "),s("p",[t._v("触发条件 : LoadFactor < 0.1")]),t._v(" "),s("p",[s("strong",[t._v("收缩源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//t_hash.c hashTypeDeleted()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictDelete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" field"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tdeleted "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除成功后 , 检查是否需要重置Dict大小 , 如果需要则调用dictResize重置")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htNeedsResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server.c文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查是否需要收缩")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htNeedsResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小")]),t._v("\n\tsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictslots")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry数量")]),t._v("\n\tused "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictsize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// size > 4 (哈希表初识大小) && 负载因子低于0.1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DICT_HT_INITIAL_SIZE: 4 ; HASHTABLE_MIN_FILL: 10")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (used*100/size < HASHTABLE_MIN_FILL) => user/size < 0.1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DICT_HT_INITIAL_SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" HASHTABLE_MIN_FILL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" minimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果正在做 bgsave或ogrewriteof或rehash , 则返回错误")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("dict_can_resize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取used , 也就是entry个数")]),t._v("\n\tminimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果used小于4 , 则重置为4")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" minimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置大小为ninimal , 其实是第一个大于等于minimal的2^n")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-3-3-rehash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-rehash"}},[t._v("#")]),t._v(" 2.3.3 rehash")]),t._v(" "),s("p",[t._v("rehash是dict的一种重建哈希表的机制(扩容/收缩 新Hash) . 当dict 的 size发生变化 , 都会检测 扩容/收缩 条件 , 为此要 将 原Hash 中的所有键值对重新插入到 新Hash 中 , 这个过程叫做 rehash")]),t._v(" "),s("p",[s("strong",[t._v("rehash运作原理 :")])]),t._v(" "),s("ol",[s("li",[t._v("计算 新Hash 的大小 , 取决于当前 扩容/收缩\n"),s("ul",[s("li",[t._v("扩容 : 新size >= 原Hash元素总数+1 的 2^n")]),t._v(" "),s("li",[t._v("收缩 : 新size >= 原Hash元素总数 的 2^n  (不得小于4)")])])]),t._v(" "),s("li",[t._v("新Hash 申请内存空间 , 创建dictht，并赋值给dict.ht[1]")]),t._v(" "),s("li",[t._v("设置 dict.rehashidx = 0 , 标示 开始rehash (可以理解成数组的索引)")]),t._v(" "),s("li",[t._v("检查 dict.rehashidx > -1  , 如果是则将 dict.ht[0].table[rehashidx]的 键值对 插入 dict.ht[1] , 并且 rehash++ , 直到 dict.ht[0] 所有数据都插入完 (插入时 会重新分配 hash值)")]),t._v(" "),s("li",[t._v("插入完后 , 给dict.ht[1]初始化为空哈希表 , 释放原来的dict.ht[0]的内存")]),t._v(" "),s("li",[t._v("将 dict.rehashidx = -1，标示 结束rehash")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("rehash中的其他情况")]),t._v(" "),s("p",[s("strong",[t._v("rehash中插入元素 :")])]),t._v(" "),s("p",[t._v("直接写入 dict.ht[1]")]),t._v(" "),s("p",[s("strong",[t._v("rehash中多线程操作dict :")])]),t._v(" "),s("p",[t._v("dict.ht[0] 和 dict.ht[1] 并行执行 互不干扰 , 保证 dict.ht[0] 只减不增 , 最终rehash结束 , 原Hash为空")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("dict.ht[0] = 原Hash")]),t._v(" "),s("p",[t._v("dict.ht[1] = 新Hash")])]),t._v(" "),s("p",[s("strong",[t._v("rehash源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict.c 文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 伸缩控制 dictExpand (参数3可以无视)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("malloc_failed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 检查 状态/申请合理 , 如果 entry数量超过要申请的size大小 或 正在rehash , 则报错 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 新声明 hash table */")]),t._v("\n    dictht n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际大小(下面有函数说明) , size <= 2^n(2^n为刚好大于或等于size)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictNextPower")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 检查内存溢出 , 超出 LONG_MAX , 报错 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" realsize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 检查变化 , 新size如果和原size 一致 , 报错 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 分配新的哈希表并将所有指针初始化为 NULL */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置大小")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" realsize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置掩码")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sizemask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" realsize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ztrycalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("malloc_failed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("malloc_failed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配内存: size * entrySize")]),t._v("\n        n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zcalloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("realsize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 如果是第一次 , 则直接把n复制给ht[0] */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("table "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 准备第二个哈希表以进行增量重新哈希 */")]),t._v("\n    d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rehashidx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2^n计算")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictNextPower")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DICT_HT_INITIAL_SIZE: 4")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" LONG_MAX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" LONG_MAX "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1LU")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-4-ziplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-ziplist"}},[t._v("#")]),t._v(" 2.4 ZipList")]),t._v(" "),s("p",[t._v("ZipList 是个特殊的 双向链表 , 它把小数据的内存压缩到极致 , 元素是由连续不确定形式的内存块组成(每个元素内存不定) .")]),t._v(" "),s("p",[t._v("在Redis中常用于 List 和 Zset 的基础数据结构")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("紧凑式存储 (省内存)")]),t._v(" "),s("li",[t._v("读写快")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("[连锁更新](#2.4.2 连锁更新问题)")])]),t._v(" "),s("p",[s("strong",[t._v("ZipList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ziplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录整个ZipList的字节数(4字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" zlbytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向ZipList的最后一个节点的偏移量(从开头指向最后元素的开始)(4字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" zltail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录ZipList中元素总量(2字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" zllen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下是实际的数据存储空间，这个空间是紧凑的字节数组")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个节点包含一个前置节点长度的字段prevlen和一个实际存储数据的entry字段")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry字段可以是字符串、整数或者浮点数，长度根据实际数据类型使用不同的字节数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" entry data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结束符(1字节)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" zlend"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" ziplist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("ZipListEntry结构体")])]),t._v(" "),s("p",[t._v("ZipListEntry是 data[]中的元素 , Entry 的并不像普通链表那样记录前后节点的指针 , 采用以下结构记录不同类型的数据")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("previous_entry_length")]),t._v(" "),s("th",[t._v("encoding")]),t._v(" "),s("th",[t._v("content")])])]),t._v(" "),s("tbody")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("previous_entry_length:")]),t._v(" 前置Entry的长度所占的字节数(1/5 字节)")]),t._v(" "),s("ul",[s("li",[t._v("如果 前置Entry长度 < 254 , 采用 1字节")]),t._v(" "),s("li",[t._v("如果 前置Entry长度 >= 254 , 采用 5字节 , 第一个字节为 0xfe(2^8-1) , 后面为真实长度")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("encoding :")]),t._v(" 编码属性 , 记录content数据类型 , (1/2/5 字节)")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("content :")]),t._v(" 负责保存节点的数据，可以是字符串或整数")])])]),t._v(" "),s("h4",{attrs:{id:"_2-4-1-encoding编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-encoding编码"}},[t._v("#")]),t._v(" 2.4.1 encoding编码")]),t._v(" "),s("p",[t._v("ZipListEntry中的 encoding编码分为 整数和字符串两种 :")]),t._v(" "),s("ul",[s("li",[t._v("字符串 头标识 "),s("code",[t._v("00")]),t._v("(1字节)/"),s("code",[t._v("01")]),t._v("(2字节)/"),s("code",[t._v("10")]),t._v("(5字节)")]),t._v(" "),s("li",[t._v("整型 头标识 "),s("code",[t._v("11")]),t._v("(1字节)")])]),t._v(" "),s("p",[s("strong",[t._v("字符串")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("编码")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("编码长度")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字符串")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|00pp pppp|")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<= 63 bytes")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|01pp pppp|qqqq qqqq|")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<= 16383 bytes")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("|1000 0000|qqqq qqqq|rrrr rrrr|ssss ssss|tttt tttt|")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("5 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("<= 4294967295 bytes")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("含有字母的代表存真实内存空间")])]),t._v(" "),s("p",[t._v('假如 分别存储字符串 {"ab", "bc"} , 那么对 ZipList结构体 内存分析 :')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlbytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("19")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zltail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("14")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zllen")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[0]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('"ab"')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[1]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('"bc"')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Tail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlend")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0xff")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])])])]),t._v(" "),s("p",[t._v('ZipListEntry结构体 分析 : (Entry的 "ab"和"bc")')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0000 (0x00)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0010 (0x02)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('0x61 | 0x62 ("ab")')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0100 (0x04)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0010 (0x02)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v('0x62 | 0x63 ("bc")')]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])])])]),t._v(" "),s("p",[s("strong",[t._v("整数")])]),t._v(" "),s("p",[t._v("encoding编码 以 "),s("code",[t._v("11")]),t._v(" 代表content为整型 , 固定占用1字节")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("编码")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("编码长度")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("整型类型")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11000000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int16_t（2 bytes）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11010000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32_t（4 bytes）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11100000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64_t（8 bytes）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11110000")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("24位有符整数(3 bytes)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("11111110")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8位有符整数(1 bytes)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1111xxxx")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1 bytes(含数据)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("直接在xxxx位置保存数值 , 范围从0001~1101 , 减1后结果为实际值")])])])]),t._v(" "),s("p",[t._v("假如 分别存储 {65536 , 3} , 那么对 ZipList结构体 内存分析 :")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlbytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("19")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zltail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zllen")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[1]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("65536")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("6")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("entry[0]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Tail")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("zlend")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0xff")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])])])]),t._v(" "),s("p",[t._v("ZipListEntry结构体 分析 : (Entry的 3 和 65536)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0000 (0x00)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1101 0000 (0xd0)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("65536")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("previous_entry_length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0000 0110 (0x06)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header-Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1111 "),s("strong",[t._v("0010")]),t._v(" (0xf4)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("0010(0x04) => 4 - 1 = 3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("-")])])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("特殊编码标识")]),t._v(" "),s("p",[t._v("1111 xxxx , 高位1111代表编码标识 , 低位xxxx代表存储的数据 , 低位仅限范围 0001 - 1101")]),t._v(" "),s("ul",[s("li",[t._v("1111 0000(0xf0) 代表 24位有符整数")]),t._v(" "),s("li",[t._v("1111 1111(0xff) 代表 结束符")]),t._v(" "),s("li",[t._v("1111 1110 代表 8位有符整数")])]),t._v(" "),s("p",[t._v("低位的编码 不能容许相同形式的出现 : 因此 低位 最小值为 0001 ; 最大值为 1101")]),t._v(" "),s("p",[t._v("那么 他的范围仅限于 1 - 14 , 为了临近实际值 , 因此实际范围为 0 - 13")]),t._v(" "),s("p",[t._v("假如 存储 5 , 那么存储范围则为 1111 00110 => 结果值 6 => 实际值 5")])]),t._v(" "),s("h4",{attrs:{id:"_2-4-2-连锁更新问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-连锁更新问题"}},[t._v("#")]),t._v(" 2.4.2 连锁更新问题")]),t._v(" "),s("p",[t._v("ZipListEntry的 "),s("code",[t._v("previous_entry_length")]),t._v(" 用来记录上一Entry节点的直接大小 , 记录的结果只有两种情况分别是 1 / 5 字节 两种")]),t._v(" "),s("p",[s("strong",[t._v("案例 :")])]),t._v(" "),s("p",[t._v("假如 ZipList 链表中有 N个连续且长度为 249 - 254 字节之间的Entry , 这N个Entry的 previous_entry_length也好只用1字节存储 , 如果在ZipListEntry头结点添加一个 254字节的Entry (触发下一节点previous_entry_length采用5字节) , 那么后面的Entry的previous_entry_length也随之变化变为5 , 卡点 254(249+5) , 从而身亲大量不必要的内存 , 像这种情况连续性多次空间拓展 称为 连锁更新 .")]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),s("p",[t._v("以上是非常极端的情况 , 发生概率极低 , 作者目前也没对其解决")])]),t._v(" "),s("h3",{attrs:{id:"_2-5-qicklist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-qicklist"}},[t._v("#")]),t._v(" 2.5 QickList")]),t._v(" "),s("p",[t._v("QickList是 双向链表和压缩列表 的混合结构 . QickList的每个节点都包含一个 ZIpList , 用于存储多个连续列表元素 , 过个节点之间是相互链接的 . 其目的是节省内存的同时 , 还保持良好的性能 . 在Redis中用于 List数据结构")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("节省内存 (QickList管理ziplist连续元素)")]),t._v(" "),s("li",[t._v("效率高 (头尾 增删快 , 满足列表特性)")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("访问中间元素新能差 (需要遍历)")])]),t._v(" "),s("p",[s("strong",[t._v("QickList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头节点指针")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尾节点指针")]),t._v("\n    quicklistNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有ziplist的entry数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplists总数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplist的entry上限 , 默认-2 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fill "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" QL_FILL_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首尾不压缩的节点数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" compress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" QL_COMP_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内存重分配是的书签数量以及数组(一般怎么用)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bookmark_count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" QL_BM_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    quicklistBookmark bookmarks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" quicklist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplist节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前一个节点指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("prev"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个节点指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("quicklistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 指针")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("zl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 字节大小")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("             \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 entry个数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码方式: 1.ziplist; 2.lzf压缩")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" encoding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据容器类型: 1.其他; 2.ziplist")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" container "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前ziplist节点 是否被解压缩: 1.被解压了, 需要重新压缩")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" recompress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 测试用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" attempted_compress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 预留字段")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" extra "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" quicklistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-11.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2-5-1-redis-配置项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-redis-配置项"}},[t._v("#")]),t._v(" 2.5.1 Redis 配置项")]),t._v(" "),s("p",[t._v("涉及到 QickList 配置项有 :")]),t._v(" "),s("ul",[s("li",[t._v("list-max-ziplist-size 控制大小")]),t._v(" "),s("li",[t._v("list-compress-depth 节点压缩")])]),t._v(" "),s("p",[s("strong",[t._v("list-max-ziplist-size")])]),t._v(" "),s("p",[t._v("控制 QuickList中的 每个ZipList大小 , 通过 数值控制 , 如下 :")]),t._v(" "),s("ul",[s("li",[t._v("正数 : 指定 ziplist允许最大entry个数")]),t._v(" "),s("li",[t._v("负数 : 指定 ziplist最大内存大小")])]),t._v(" "),s("p",[t._v("负数内存大小指定说明 :")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("配置项值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 4kb")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 8kb (默认值)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 16kb")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 32kb")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("-5")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("每个ZipList内存大小 <= 64kb")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("1 kb = 1024 bytes(字节)")])]),t._v(" "),s("p",[s("strong",[t._v("list-compress-depth")])]),t._v(" "),s("p",[t._v("控制 QuickList中的 ZipList节点做压缩 , 通过 数值控制 , 如下 :")]),t._v(" "),s("ul",[s("li",[t._v("0 : 特殊值 , 不压缩(默认)")]),t._v(" "),s("li",[t._v("1 : QuickList 的首尾各一个节点不压缩 , 中间节点压缩")]),t._v(" "),s("li",[t._v("N : QuickList 的首尾各N个节点不压缩 , 中间节点压缩")])]),t._v(" "),s("h3",{attrs:{id:"_2-6-skiplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-skiplist"}},[t._v("#")]),t._v(" 2.6 SkipList")]),t._v(" "),s("p",[t._v("SkipList(跳表)是有序的双向链表的数据结构 , 节点可能含有多节点指针 , 不同跨度 , 其目的是为了 插入/删除/查询 速度都达到 O(log n) , 在Redis中用于 ZSet数据类型")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("查询效率堪比二分查找")]),t._v(" "),s("li",[t._v("实现简单 , 容易维护")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("消耗内存空间 (空间换时间)")])]),t._v(" "),s("p",[s("strong",[t._v("SkipList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplist")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 头尾节点指针")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("header"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点数量")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大的索引层级(默认1 ;最大20)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("zskiplist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点存储的值")]),t._v("\n\tsds ele"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 节点分数 , 排序、查找用")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" score"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前一个节点指针")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("backward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多级 索引数组")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistLevel")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个节点指针")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("zskiplistNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("forward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 索引跨度")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" span"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("zskiplistNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-12.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-7-redisobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-redisobject"}},[t._v("#")]),t._v(" 2.7 RedisObject")]),t._v(" "),s("p",[t._v("Redis中的任意数据类型的键和值都会被封装为一个RedisObject")]),t._v(" "),s("p",[s("strong",[t._v("SkipList结构体源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisobject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象类型(4bit)(string;hsah;list;set;zset)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 底层编码方式(4bit)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后一次访问的时间戳(24bit)(判断闲置过久的key)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("LRU_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象引用计数器(4bytes)(0:对象无人引用; 每次引用+1)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" refcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 真实对象数据指针(8bytes)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("robj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("Redis存储数据类型的"),s("strong",[t._v("encoding编码")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("编号")])]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("编码方式")])]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("说明")])])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_RAW")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("raw编码动态字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_INT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("long类型的整数的字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_HT")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("hash表(字典dict)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_ZIPMAP")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("已废弃")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_LINKEDLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("双端链表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_ZIPLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("压缩列表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("6")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_INTSET")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("整数集合")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("7")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_SKIPLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("跳表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_EMBSTR")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("embstr的动态字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("9")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_QUICKLIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("快速列表")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("10")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ENCODING_STREAM")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Stream流")])])])]),t._v(" "),s("p",[t._v("Redis每种数据类型的使用的编码方式")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("数据类型")])]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("编码方式")])])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_STRING")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int ; embstr ; raw")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_LIST")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("LinkedList和ZipList(3.2以前) ; QuickList（3.2以后）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_SET")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("intset ; HT")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_ZSET")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ZipList ; HT ; SkipList")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("OBJ_HASH")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("ZipList ; HT")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-8-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-string"}},[t._v("#")]),t._v(" 2.8 String")]),t._v(" "),s("p",[t._v("Redis最常见类型String , 其编码有 :")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("RAW编码")]),t._v("  , 存储上限512mb ([基于SDS实现](2.1 SDS))")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("EMBSTR编码")])]),t._v(" "),s("p",[t._v("采用情况 : 当SDS总长度小于44字节")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("INT编码")])]),t._v(" "),s("p",[t._v("采用情况 : 字符串中内容是整数值 , 且大小为 LONG_MAX 范围内")])])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("其他编码")]),t._v(" "),s("p",[s("strong",[t._v("EMBSTR编码")])]),t._v(" "),s("p",[t._v("RAW编码 在RedisObject中是需要指针 *ptr 指向外部的SDS内存地址来引用 , 而 EMBSTR编码 在RedisObject中是一对连续空间 , 只需申请一次内存分配函数即可实现 . 无需指针指向外部地址 , 能节省更多空间 , 无需寻址 , 效率更高")]),t._v(" "),s("p",[s("strong",[t._v("INT编码")])]),t._v(" "),s("p",[t._v("INT编码 直接在RedisObject中的 *ptr 位置抽出刚好的8字节空间存储")])]),t._v(" "),s("p",[t._v("三种类型的结构图 :")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-13.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-9-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-list"}},[t._v("#")]),t._v(" 2.9 List")]),t._v(" "),s("p",[t._v("Redis的List类型 可从首尾进行操作元素 , 底层通过 [QickList](#2.5 QickList)实现(3.2版本后)")]),t._v(" "),s("p",[s("strong",[t._v("Push源码")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** push源码\n\t\tclient: 客户端信息,当中包含有命令\n\t\twhere: 0:头新增; 1:尾新增\n\t\txx: 当前push的key存在\n**/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushGenericCommand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" where"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断元素大小 , 不能超过LIST_MAX_ITEM_SIZE")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// LPUSH key v1 v2 ... (跳过前面两个 , 从2开始")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历参数 argv[]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sdslen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LIST_MAX_ITEM_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addReplyError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Element too large"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试找到KEY对应的list . 选择指定库db , argv[1]: key")]),t._v("\n    robj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookupKeyWrite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查类型是否正确")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("OBJ_LIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断空")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addReply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shared"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("czero"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为空情况 , 创建新的QuickList")]),t._v("\n        lobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createQuicklistObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("quicklistSetOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list_max_ziplist_size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list_compress_depth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dbAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listTypePush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("where"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dirty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addReplyLongLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listTypeLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("event "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("where "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" LIST_HEAD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lpush"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rpush"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalModifiedKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyKeyspaceEvent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NOTIFY_LIST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("db"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("p",[s("strong",[t._v("结构图 :")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://image.bozhu12.cc/myblog/Redis/redis-11.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_2-10-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-set"}},[t._v("#")]),t._v(" 2.10 Set")]),t._v(" "),s("p",[t._v("Set集合 , 基于 Dict数据结构实现")]),t._v(" "),s("p",[s("strong",[t._v("特点 :")])]),t._v(" "),s("ul",[s("li",[t._v("元素无序")]),t._v(" "),s("li",[t._v("元素唯一")]),t._v(" "),s("li",[t._v("求 交集/并集/差集")])]),t._v(" "),s("p",[s("strong",[t._v("Set编码选型 :")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("HT编码")]),t._v("  , 采取Dict实现 , 也是默认应用")]),t._v(" "),s("li",[s("strong",[t._v("IntSet编码")]),t._v("\n采用情况 : 但所有元素都是整数 , 且这些数值不超过 set-max-intset-entries 最大值")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("IntSet编码转化HT编码情况")]),t._v(" "),s("p",[t._v("在采用IntSet编码的时 , 每当 插入/更改 元素 , 都会检测该元素的类型是否满足 , 如果不满足则转换为 HT编码")]),t._v(" "),s("p",[s("strong",[t._v("条件 :")])]),t._v(" "),s("ul",[s("li",[t._v("元素值为整数")]),t._v(" "),s("li",[t._v("数值 < set-max-intset-entries")])])]),t._v(" "),s("h3",{attrs:{id:"zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[t._v("#")]),t._v(" ZSet")]),t._v(" "),s("h3",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),s("h2",{attrs:{id:"_3-网络模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络模型"}},[t._v("#")]),t._v(" 3. 网络模型")]),t._v(" "),s("h2",{attrs:{id:"_4-通信协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-通信协议"}},[t._v("#")]),t._v(" 4. 通信协议")])])}),[],!1,null,null,null);s.default=n.exports}}]);