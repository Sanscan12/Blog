(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{394:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("非常感谢虎哥给我带来这篇Redis基础原理知识的讲解 , 让我更深刻地理解了Redis的设计思想和数据结构 . 从最基本概念到高级特性，虎哥逐层讲解，让我们受益匪浅")]),t._v(" "),s("p",[s("strong",[t._v("视频 :")]),t._v(" "),s("a",{attrs:{href:"https://www.bilibili.com/video/BV1cr4y1671t/?p=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.bilibili.com"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),s("h3",{attrs:{id:"sds"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sds"}},[t._v("#")]),t._v(" SDS")]),t._v(" "),s("p",[t._v("Redis构建了一种新的字符串结构 , 称为简单动态字符串(SDS)")]),t._v(" "),s("p",[t._v("C语言中的字符串 , 是通过数组形式拼接字符 , 因此没有直接使用语言中的字符串 , 并且当中也存在很多问题 :")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("获取字符串长度的需要通过运算")])]),t._v(" "),s("li",[s("strong",[t._v("非二进制安全")])]),t._v(" "),s("li",[s("strong",[t._v("不可修改")])])]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("操作快 , 简单 , 灵活 (有标识记录长度等相关信息 , 用于检索数组操作)")]),t._v(" "),s("li",[t._v("动态扩容 (含有扩容相关机制)")]),t._v(" "),s("li",[t._v("二进制形式 , 相对安全")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("占用内存 (结构体包含的元数据过多)")]),t._v(" "),s("li",[t._v("功能有限 (仅限于读写操作 , 没有其他相关拓展功能)")])]),t._v(" "),s("p",[s("strong",[t._v("SDS结构体")])]),t._v(" "),s("div",{staticClass:"language-C extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 控制SDS的头类型大小 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("SDS_TYPE_64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* sdshdr8 结构体名称 . 有很多个相同结构 如上面... */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("_attribute_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_packed_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sdshdr8 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* uint8_t : 无符号8个bit位 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf已保存的字符串字节数 , 不包含结束标识 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* buf申请的总字节数 , 不包含结束标识 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 不同SDS的头类型 , 用来控制SDS的头大小 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("flags意图")]),t._v(" "),s("p",[t._v("uint8_t 定义的是 无符号8个bit位 , 8bit位长度就仅限于 0 - 255 的大小 , 那么通过 len 和 alloc 控制的长度不可能仅限于 0 - 255 , 因此 通过 flags 控制字节大小 , 尽可能将 8bit 压缩在 0 - 255 数值范围")]),t._v(" "),s("p",[s("strong",[t._v("PS :")]),t._v(" 1字节 = 8位")])]),t._v(" "),s("p",[t._v("假如我Redis执行该命令 "),s("code",[t._v("set name Sans")]),t._v(' . 那么Redis将在底层创建两个SDS , 分别是 "name" 和 "Sans"')]),t._v(" "),s("p",[t._v('"'),s("strong",[t._v('name" SDS结构分析')])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['n','a','m','e']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4(1*4)")])])])]),t._v(" "),s("p",[s("strong",[t._v('"Sans" SDS结构分析')])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['S','a','n','s']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4(1*4)")])])])]),t._v(" "),s("p",[t._v('假如 往"Sans" SDS追加一段字符 ",Any" , 那么会执行内存拓展申请 : (申请有两种可能)')]),t._v(" "),s("ul",[s("li",[t._v("如果新字符串小于1M , 则 增加后的长度两倍 + 1")]),t._v(" "),s("li",[t._v("如果新字符串大于1M , 则 增加后的长度两倍 + 1M +1 (内存预分配)")])]),t._v(" "),s("p",[t._v('那么 "Sans" 这变为 "Sans,Any" , SDS结构分析')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("lan")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("alloc")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("12")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("flags")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("1")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("buf[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("['S', 'a', 'n', 's', ',', 'A', 'n', 'y']")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("8(1*8)")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("C语言字符串结尾必须有 "),s("code",[t._v("\\0")]),t._v(" 作为结束 , 因此 计算后的长度需要+1 , 就是为结束标示而腾出的位置")])]),t._v(" "),s("h3",{attrs:{id:"intset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intset"}},[t._v("#")]),t._v(" IntSet")]),t._v(" "),s("p",[t._v("IntSet是Redis中set集合的一种实现方式 , 基于 整数数组 来实现 , 并且具备 长度可变/有序 等特征")]),t._v(" "),s("p",[t._v("为了方便查找 , Redis会将intset中所有的整数按照升序依次保存在contents数组中")]),t._v(" "),s("p",[s("strong",[t._v("优点 :")])]),t._v(" "),s("ul",[s("li",[t._v("IntSet 确保元素 唯一 , 有序")]),t._v(" "),s("li",[t._v("类型升级机制 , 节省内存")]),t._v(" "),s("li",[t._v("快速查找 (内部采用二分查找算法)")]),t._v(" "),s("li",[t._v("内存连续 (存储是连续形式 , 充分利用资源)")])]),t._v(" "),s("p",[s("strong",[t._v("缺点 :")])]),t._v(" "),s("ul",[s("li",[t._v("只能用于整型")]),t._v(" "),s("li",[t._v("内存浪费 (当数组中有一个元素大数字 , 且其他都是小元素)")]),t._v(" "),s("li",[t._v("不能范围查找 (指定范围查元素)")])]),t._v(" "),s("p",[s("strong",[t._v("IntSet结构体")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存放 encoding , 表示不同整型大小 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 2字节 整数 , 类以java的short */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nt16t_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 4字节 整数 , 类以java的int */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("nt32t_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 8字节 整数 , 类以java的long */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 编码方式 , 支特存放16位、32位、64位整数 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 元素个数 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 整数数组 , 保存集合数据 */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int8_t")]),t._v(" contents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("intset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("假如 使用intset存了 {20, 5, 10} 3个元素 , 采取编码 INTSET_ENC16(2字节) , "),s("strong",[t._v("IntSet结构分析 :")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("INTSET_ENC16")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("contents[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("[5,10,20]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("6(2*3)")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("上面定义了采用的类型因此存储的字节是不一样的! 采用了 INTSET_ENC16 类型 2字节")])]),t._v(" "),s("p",[t._v("假如 数组添加了一个 5000 , 大于 INTSET_ENC16(2字节) 的范围 , IntSet会自动升级编码方式找到合适大小 , 升级流程 :")]),t._v(" "),s("ol",[s("li",[t._v("升级编码 INTSET_ENC_INT32(4字节) , 并按照新的编码方式及元素个数扩容数组")]),t._v(" "),s("li",[t._v("倒序依次将数组中的元素拷贝到扩容后的正确位置")]),t._v(" "),s("li",[t._v("将 5000元素 添加放入数组末尾")]),t._v(" "),s("li",[t._v("IntSet的 encoding属性改为INTSET_ENC_INT32 ; length属性改为4")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("步骤2 倒序扩容是为了防止前面的数在扩容时覆盖其他数据 . 一号元素占用2字节改为4字节  , 会占用到第二元素位置的2字节 .")]),t._v(" "),s("p",[t._v("为了防止这一现象 , 采用倒序扩容 , 从最后元素开始扩容 !")])]),t._v(" "),s("p",[s("strong",[t._v("结构分析 :")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("标识")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("值")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("字节")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("encoding")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("INTSET_ENC32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Header")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("length")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("4")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("Data")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("contents[]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("[5,10,20,5000]")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("16(4*4)")])])])]),t._v(" "),s("h3",{attrs:{id:"dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[t._v("#")]),t._v(" Dict")]),t._v(" "),s("p",[t._v("Redis中的键值对映射关系底层是通过 Dict实现的 , 它涉及到 键值对 , 哈希表 , 有序集合等相关应用")]),t._v(" "),s("p",[t._v("Dict的底层是由 数组和链表 组合 , 数组中每个元素都是一个指向链表的指针 , 每个链表节点包含一个键值对")]),t._v(" "),s("p",[s("strong",[t._v("Dict结构体")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict类型 , 内置不同的hash函数")]),t._v("\n\tdictType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有数据 , 在做特殊hash运算时用")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个Dict包含两个哈希表 , 一个是当前数据 , 另一个 rehash时使用(一般为空) ")]),t._v("\n\tdictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash的进度 , -1:未进行; rehashidx > -1:运行")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash是否暂停 , 1:暂停;0:继续")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int16_t")]),t._v(" pauserehash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry数组")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组中保存的是指向entry的指针")]),t._v("\n\tdictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小的掩码 , 总等于size-1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry个数")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希节点 dictEntry")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键 key")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值 val")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个Entry的指针")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"dict-扩容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict-扩容"}},[t._v("#")]),t._v(" Dict 扩容")]),t._v(" "),s("p",[t._v("Dict中的 table 是数组与单向链表 的结构 , 当集合的元素较多时 , 必然会导致哈希冲突 , 和链表过长问题 , 甚至会影响效率\n因此 Dict内置了 自动扩容机制 , 当每次新增键值对的时 , 会检测 "),s("strong",[t._v("负载因子")]),t._v("(LoadFactor) , 判断以下两种条件会触发扩容 :")]),t._v(" "),s("ul",[s("li",[t._v("LoadFactor >= 1 , 并且 Redis 没有进行持久化")]),t._v(" "),s("li",[t._v("LoadFactor > 5")])]),t._v(" "),s("p",[s("strong",[t._v("计算公式 :")]),t._v(" "),s("code",[t._v("负载因子(LoadFactor) = used(当前元素总数)/size(空间总数)")])]),t._v(" "),s("p",[s("strong",[t._v("扩容运作过程 :")])]),t._v(" "),s("ol",[s("li",[t._v("创建 新Hash , 新Hash大小为 原Hash元素总数+1 的2^n (简单理解为2倍)")]),t._v(" "),s("li",[t._v("将 原Hash 所有元素逐个遍历 , 插入 新Hash (重新分配 哈希桶 , 防止hash冲突)")]),t._v(" "),s("li",[t._v("插入完后 Redis会将 原Hash 释放")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("dict.ht[0] = 原Hash")]),t._v(" "),s("p",[t._v("dict.ht[1] = 新Hash")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("扩容中的特殊情况")]),t._v(" "),s("p",[s("strong",[t._v("扩容中插入元素 :")])]),t._v(" "),s("p",[t._v("在扩容中若有 新元素 插入 , Redis会将 新元素 先插入 原Hash 中 , 再将 原Hash 所有元素逐个遍历插入至 新Hash (利用key唯一性 , 保证了 新元素 不会缺漏)")]),t._v(" "),s("p",[s("strong",[t._v("扩容中多线程操作dict :")])]),t._v(" "),s("p",[t._v("在扩容中 , 如果有多个线程同时对dict进行操作 , Redis会采取读写锁机制保证 dict 的线程安全")])]),t._v(" "),s("p",[s("strong",[t._v("扩容机制源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_dictExpandIfNeeded")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果正在rehash , 则返回ok")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果哈希表为空 , 则初始化哈希表为默认大小 : 4")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当负载因子(used/size)达到1以上 , 并且当前没有进行ogrewrite(持久化过程)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d->ht[0].used >= d->ht[0].size => (used/size)达到1以上")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dict_can_resize (Redis是否闲置状态 , 非持久化状态)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d->ht[0].used/d->ht[0].size > dict_force_resize_ratio => 负载因子超过5 , 则进行dictExpand(扩容)")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict_can_resize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dict_force_resize_ratio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 扩容大小为used + 1 , 底层会对扩容大小做判断 , 实际上找的是第一个大于等于 used + 1 的 2^n")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"dict-收缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict-收缩"}},[t._v("#")]),t._v(" Dict 收缩")]),t._v(" "),s("p",[t._v("Dict还有收缩机制 , 正是和扩容机制相反 . 每当删除元素的时候 , 会检测 "),s("strong",[t._v("负载因子")]),t._v("(LoadFactor)")]),t._v(" "),s("p",[t._v("触发条件 : LoadFactor < 0.1")]),t._v(" "),s("p",[s("strong",[t._v("收缩源代码 :")])]),t._v(" "),s("p",[t._v("::: 源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//t_hash.c hashTypeDeleted()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictDelete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" field"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tdeleted "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除成功后 , 检查是否需要重置Dict大小 , 如果需要则调用dictResize重置")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htNeedsResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ptr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server.c文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查是否需要收缩")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("htNeedsResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表大小")]),t._v("\n\tsize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictslots")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// entry数量")]),t._v("\n\tused "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictsize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// size > 4 (哈希表初识大小) && 负载因子低于0.1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DICT_HT_INITIAL_SIZE: 4 ; HASHTABLE_MIN_FILL: 10")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (used*100/size < HASHTABLE_MIN_FILL) => user/size < 0.1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DICT_HT_INITIAL_SIZE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" HASHTABLE_MIN_FILL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictResize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" minimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果正在做 bgsave或ogrewriteof或rehash , 则返回错误")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("dict_can_resize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictIsRehashing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" DICT_ERR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取used , 也就是entry个数")]),t._v("\n\tminimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果used小于4 , 则重置为4")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" minimal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DICT_HT_INITIAL_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置大小为ninimal , 其实是第一个大于等于minimal的2^n")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictExpand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v(":::")]),t._v(" "),s("h4",{attrs:{id:"dict-rehash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict-rehash"}},[t._v("#")]),t._v(" Dict rehash")]),t._v(" "),s("p",[t._v("rehash是dict的一种重建哈希表的机制(扩容/收缩 新Hash) . 当dict 的 size发生变化 , 都会检测 扩容/收缩 条件 , 为此要 将 原Hash 中的所有键值对重新插入到 新Hash 中 , 这个过程叫做 rehash")]),t._v(" "),s("p",[s("strong",[t._v("rehash运作原理 :")])]),t._v(" "),s("ol",[s("li",[t._v("计算 新Hash 的大小 , 取决于当前 扩容/收缩\n"),s("ul",[s("li",[t._v("扩容 : 新size >= 原Hash元素总数+1 的 2^n")]),t._v(" "),s("li",[t._v("收缩 : 新size >= 原Hash元素总数 的 2^n  (不得小于4)")])])]),t._v(" "),s("li",[t._v("新Hash 申请内存空间 , 创建dictht，并赋值给dict.ht[1]")]),t._v(" "),s("li",[t._v("设置 dict.rehashidx = 0 , 标示 开始rehash (可以理解成数组的索引)")]),t._v(" "),s("li",[t._v("检查 dict.rehashidx > -1  , 如果是则将 dict.ht[0].table[rehashidx]的 键值对 插入 dict.ht[1] , 并且 rehash++ , 直到 dict.ht[0] 所有数据都插入完 (插入时 会重新分配 hash值)")]),t._v(" "),s("li",[t._v("插入完后 , 给dict.ht[1]初始化为空哈希表 , 释放原来的dict.ht[0]的内存")]),t._v(" "),s("li",[t._v("将 dict.rehashidx = -1，标示 结束rehash")])]),t._v(" "),s("div",{staticClass:"custom-block note"},[s("p",{staticClass:"custom-block-title"},[t._v("rehash中的其他情况")]),t._v(" "),s("p",[s("strong",[t._v("rehash中插入元素 :")])]),t._v(" "),s("p",[t._v("直接写入 dict.ht[1]")]),t._v(" "),s("p",[s("strong",[t._v("rehash中多线程操作dict :")])]),t._v(" "),s("p",[t._v("dict.ht[0] 和 dict.ht[1] 并行执行 互不干扰 , 保证 dict.ht[0] 只减不增 , 最终rehash结束 , 原Hash为空")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("dict.ht[0] = 原Hash")]),t._v(" "),s("p",[t._v("dict.ht[1] = 新Hash")])]),t._v(" "),s("p",[s("strong",[t._v("rehash源码 :")])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("源码 点击展开")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// dict.c 文件\n// 伸缩控制 dictExpand (参数3可以无视)\nint _dictExpand(dict *d, unsigned long size, int* malloc_failed) {\n    if (malloc_failed) *malloc_failed = 0;\n\n    /* 检查 状态/申请合理 , 如果 entry数量超过要申请的size大小 或 正在rehash , 则报错 */\n    if (dictIsRehashing(d) || d->ht[0].used > size)\n        return DICT_ERR;\n    \n\t/* 新声明 hash table */\n    dictht n; \n    // 实际大小(下面有函数说明) , size <= 2^n(2^n为刚好大于或等于size)\n    unsigned long realsize = _dictNextPower(size);\n\n    /* 检查内存溢出 , 超出 LONG_MAX , 报错 */\n    if (realsize < size || realsize * sizeof(dictEntry*) < realsize)\n        return DICT_ERR;\n\n    /* 检查变化 , 新size如果和原size 一致 , 报错 */\n    if (realsize == d->ht[0].size) return DICT_ERR;\n\n    /* 分配新的哈希表并将所有指针初始化为 NULL */\n    // 重置大小\n    n.size = realsize;\n    // 重置掩码\n    n.sizemask = realsize-1;\n    if (malloc_failed) {\n        n.table = ztrycalloc(realsize*sizeof(dictEntry*));\n        *malloc_failed = n.table == NULL;\n        if (*malloc_failed)\n            return DICT_ERR;\n    } else{\n        // 分配内存: size * entrySize\n        n.table = zcalloc(realsize*sizeof(dictEntry*));\n    }\n    n.used = 0;\n\n    /* 如果是第一次 , 则直接把n复制给ht[0] */\n    if (d->ht[0].table == NULL) {\n        d->ht[0] = n;\n        return DICT_OK;\n    }\n\n    /* 准备第二个哈希表以进行增量重新哈希 */\n    d->ht[1] = n;\n    d->rehashidx = 0;\n    return DICT_OK;\n}\n\n// 2^n计算\nstatic unsigned long _dictNextPower(unsigned long size) {\n    // DICT_HT_INITIAL_SIZE: 4\n    unsigned long i = DICT_HT_INITIAL_SIZE;\n\n    if (size >= LONG_MAX) return LONG_MAX + 1LU;\n    while(1) {\n        if (i >= size)\n            return i;\n        i *= 2;\n    }\n}\n")])])])]),t._v(" "),s("h3",{attrs:{id:"ziplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ziplist"}},[t._v("#")]),t._v(" ZipList")]),t._v(" "),s("h3",{attrs:{id:"quicklist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quicklist"}},[t._v("#")]),t._v(" QuickList")]),t._v(" "),s("h3",{attrs:{id:"redisobject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redisobject"}},[t._v("#")]),t._v(" RedisObject")]),t._v(" "),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("h3",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),s("h3",{attrs:{id:"zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[t._v("#")]),t._v(" ZSet")]),t._v(" "),s("h3",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),s("h2",{attrs:{id:"网络模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络模型"}},[t._v("#")]),t._v(" 网络模型")]),t._v(" "),s("h2",{attrs:{id:"通信协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通信协议"}},[t._v("#")]),t._v(" 通信协议")])])}),[],!1,null,null,null);s.default=e.exports}}]);